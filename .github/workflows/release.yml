name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*'   # e.g., v1.0.0
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            bin_ext: ""

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            bin_ext: ""

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            bin_ext: ".exe"

          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            archive: zip
            bin_ext: ".exe"

          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: zip
            bin_ext: ""

          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: zip
            bin_ext: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu' && runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install cross-compilation tools (Windows ARM64)
        if: matrix.target == 'aarch64-pc-windows-msvc' && runner.os == 'Windows'
        run: |
          # Windows ARM64 cross-compilation is natively supported by MSVC
          # No additional tools needed, but ensure the correct build tools are available
          echo "Windows ARM64 cross-compilation enabled via MSVC"

      - name: Install cross-compilation tools (macOS)
        if: (matrix.target == 'aarch64-apple-darwin' || matrix.target == 'x86_64-apple-darwin') && runner.os == 'macOS'
        run: |
          # macOS supports universal binaries and cross-compilation natively
          # No additional tools needed on modern macOS with Xcode
          echo "macOS cross-compilation enabled"

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Sign Windows executable
        if: runner.os == 'Windows'
        shell: powershell
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          $binPath = "target\${{ matrix.target }}\release\build-it-agent${{ matrix.bin_ext }}"
          
          # Check if production certificate is available
          if ($env:CERTIFICATE_BASE64) {
            Write-Host "Using production certificate..." -ForegroundColor Cyan
            
            # Decode certificate from base64 secret
            $certBytes = [System.Convert]::FromBase64String($env:CERTIFICATE_BASE64)
            $certPath = "temp-cert.pfx"
            [IO.File]::WriteAllBytes($certPath, $certBytes)
            
            # Find SignTool
            $signTool = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter "signtool.exe" | 
                        Where-Object { $_.FullName -like "*\x64\*" } | 
                        Select-Object -First 1 -ExpandProperty FullName
            
            if (-not $signTool) {
              Write-Warning "SignTool not found, falling back to self-signed certificate"
            } else {
              Write-Host "Using SignTool: $signTool"
              
              # Sign with production certificate
              & $signTool sign `
                /f $certPath `
                /p $env:CERTIFICATE_PASSWORD `
                /tr http://timestamp.digicert.com `
                /td sha256 `
                /fd sha256 `
                $binPath
              
              if ($LASTEXITCODE -eq 0) {
                Write-Host "[SUCCESS] Binary signed with production certificate!" -ForegroundColor Green
                Remove-Item $certPath -ErrorAction SilentlyContinue
                exit 0
              } else {
                Write-Warning "Production signing failed, falling back to self-signed certificate"
              }
            }
            
            # Clean up certificate
            Remove-Item $certPath -ErrorAction SilentlyContinue
          }
          
          # Use self-signed certificate (fallback or default)
          Write-Host "Creating self-signed certificate..." -ForegroundColor Yellow
          
          $cert = New-SelfSignedCertificate `
            -Subject "CN=BuildIT Agent, O=GitHub Actions, C=US" `
            -Type CodeSigningCert `
            -CertStoreLocation Cert:\CurrentUser\My `
            -NotAfter (Get-Date).AddYears(3)
          
          Write-Host "Certificate created with thumbprint: $($cert.Thumbprint)" -ForegroundColor Cyan
          
          # Sign with self-signed certificate
          $signResult = Set-AuthenticodeSignature `
            -FilePath $binPath `
            -Certificate $cert `
            -TimestampServer "http://timestamp.digicert.com" `
            -HashAlgorithm SHA256
          
          if ($signResult.Status -eq "Valid" -or $signResult.Status -eq "UnknownError") {
            Write-Host "[SUCCESS] Binary signed with self-signed certificate!" -ForegroundColor Green
            Write-Host "Status: $($signResult.Status)" -ForegroundColor Cyan
          } else {
            Write-Warning "Self-signing failed: $($signResult.StatusMessage)"
            Write-Warning "Binary will remain unsigned"
          }
          
          # Clean up certificate from store
          Remove-Item "Cert:\CurrentUser\My\$($cert.Thumbprint)" -ErrorAction SilentlyContinue

      - name: Prepare archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist
          $BIN_NAME = "build-it-agent${{ matrix.bin_ext }}"
          $BIN_PATH = "target/${{ matrix.target }}/release/$BIN_NAME"

          if (-not (Test-Path $BIN_PATH)) {
            Write-Error "Error: Binary not found at $BIN_PATH"
            exit 1
          }

          Copy-Item $BIN_PATH -Destination "dist/"
          $ARCHIVE_NAME = "build-it-agent-${{ matrix.target }}.zip"
          Compress-Archive -Path "dist/$BIN_NAME" -DestinationPath "dist/$ARCHIVE_NAME" -Force

      - name: Prepare archive (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p dist
          BIN_NAME="build-it-agent${{ matrix.bin_ext }}"
          BIN_PATH="target/${{ matrix.target }}/release/$BIN_NAME"

          if [ ! -f "$BIN_PATH" ]; then
            echo "Error: Binary not found at $BIN_PATH"
            exit 1
          fi

          cp "$BIN_PATH" "dist/"
          cd dist

          if [ "${{ matrix.archive }}" = "zip" ]; then
            ARCHIVE_NAME="build-it-agent-${{ matrix.target }}.zip"
            zip -r "$ARCHIVE_NAME" "$BIN_NAME"
          else
            ARCHIVE_NAME="build-it-agent-${{ matrix.target }}.tar.gz"
            tar -czf "$ARCHIVE_NAME" "$BIN_NAME"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: dist/*

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display structure (debug)
        run: ls -R dist

      - name: Create checksums
        run: |
          cd dist
          find . -type f -exec sha256sum "{}" \; > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*.zip
            dist/**/*.tar.gz
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
